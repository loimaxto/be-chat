datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversation_participants {
  conversation_id      String        @db.Uuid
  user_id              String        @db.Uuid
  joined_at            DateTime?     @default(now()) @db.Timestamptz(6)
  left_at              DateTime?     @db.Timestamptz(6)
  is_admin             Boolean       @default(false)
  last_read_message_id String?       @db.Uuid
  status               String        @default("active") @db.VarChar(20)
  conversations        conversations @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conv_participants_conversation")
  users                users         @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conv_participants_user")

  @@id([conversation_id, user_id])
  @@index([user_id], map: "idx_conv_participants_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversations {
  conversation_id           String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                      String                      @db.VarChar(10)
  name                      String?                     @db.VarChar(100)
  created_by_user_id        String                      @db.Uuid
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  conversation_participants conversation_participants[]
  users                     users                       @relation(fields: [created_by_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversations_created_by")
  messages                  messages[]

  @@index([created_by_user_id], map: "idx_conversations_created_by_user_id")
  @@index([type], map: "idx_conversations_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model message_reads {
  message_id String    @db.Uuid
  user_id    String    @db.Uuid
  read_at    DateTime? @default(now()) @db.Timestamptz(6)
  messages   messages  @relation(fields: [message_id], references: [message_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_message_reads_message")
  users      users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_message_reads_user")

  @@id([message_id, user_id])
  @@index([message_id], map: "idx_message_reads_message_id")
  @@index([user_id], map: "idx_message_reads_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model messages {
  message_id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id       String          @db.Uuid
  sender_id             String          @db.Uuid
  content               String?
  content_type          String          @db.VarChar(20)
  media_url             String?         @db.VarChar(255)
  sent_at               DateTime?       @default(now()) @db.Timestamptz(6)
  replied_to_message_id String?         @db.Uuid
  deleted_at            DateTime?       @db.Timestamptz(6)
  message_reads         message_reads[]
  conversations         conversations   @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_messages_conversation")
  messages              messages?       @relation("messagesTomessages", fields: [replied_to_message_id], references: [message_id], onUpdate: NoAction, map: "fk_messages_replied_to")
  other_messages        messages[]      @relation("messagesTomessages")
  users                 users           @relation(fields: [sender_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_messages_sender")

  @@index([conversation_id], map: "idx_messages_conversation_id")
  @@index([sender_id], map: "idx_messages_sender_id")
  @@index([sent_at(sort: Desc)], map: "idx_messages_sent_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  user_id                   String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                  String                      @unique @db.VarChar(50)
  email                     String                      @unique @db.VarChar(100)
  password_hash             String                      @db.VarChar(255)
  status                    String                      @default("offline") @db.VarChar(20)
  last_seen_at              DateTime?                   @default(now()) @db.Timestamptz(6)
  profile_picture_url       String?                     @db.VarChar(255)
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  conversation_participants conversation_participants[]
  conversations             conversations[]
  message_reads             message_reads[]
  messages                  messages[]

  @@index([email], map: "idx_users_email")
  @@index([status], map: "idx_users_status")
  @@index([username], map: "idx_users_username")
}

generator client {
  provider = "prisma-client-js"
}